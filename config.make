# $Id: config.make,v 1.18 2005/05/07 13:32:08 solomon Exp $

# Configuration information for the ClassAd package, meant to be included
# by the GNUmake "include" directive

RELEASE = 2.2

# Do not edit this file unless you intend your changes to be used by all users.
# Instead, create a file local.make in this directory and override settings
# there.  See README for more information about configuring.

# Each package condor.xxx.yyy should be in a sub-directory condor/xxx/yyy
# (called the "package directory") of the directory containing this config.make
# (called the "top" directory).  The package directory should contain a
# Makefile written according to the following conventions.
#
# The first lines in the Makefile (other than comments) should be
#
#    PACKAGE = condor.xxx.package
#    TOP = ../../..
#    include $(TOP)/config.make
#
# The first target listed in this file is jar, so "make" with no arguments is
# the same as "make jar".  An individual Makefile can override this default by
# placing a rule before the "include", for example,
#
#    PACKAGE = condor.xxx.package
#    TOP = ../../..
#    default: tests
#    include $(TOP)/config.make
#    
# The following macros should be defined before the "include":
#
#    PACKAGE   the fully-qualified name of the package (condor.xxx.package).
#              The "jar:" target creates the jar file package.jar.
#    TOP       a relative path from the package directory to the top
#              directory: a string of the form ../../.., with one ".." for each
#              component of PACKAGE.
#    JLIBS (optional)
#              a colon-separated list of additional .jar files needed to
#              compile or run classes in the directory.
#    MAIN_CLASS (optional)
#              the name of class containing the main() method to be run by
#              "java -jar package.jar".
#    EXTRA_FILES (optional)
#              names of addtional files to be included in package.jar
#    EXTRA_DOC (optional)
#              names of addtional packages to be included in javadoc
#
# The directory should also contain a file named "classes.make" that contains
# a list of the names of the classes, one per line, that should be included in
# this package.  The names should be just the base names of the classes,
# without the package name or a '.class' suffix, and should not include any
# names of nested classes.
#
# IMPORTANT:  Except for nested classes, each .java source file should define
# exactly one class.
#
# The Makefile should also have one rule before the "include".  This rule
# establishes the target to be built when "make" is called with no arguments.
#
# The principal targets defined here are
#
#   classes:
#      Creates or updates all the .class files implied by classes.make
#   jar::
#      Creates or updates package.jar
#   javadoc::
#      Creates the sub-directory doc and populates it with documenation on
#      $(PACKAGE)
#   clean::
#      Removes *.class and *.jar
#   distclean::
#      By default, the same as clean::
#   all::
#      By default, the same as classes::
#   run::
#      By default, empty.
#   test::
#      By default, empty.
#
# The Makefile in the package directory should use the two-colon form for
# adding actions to the all, run, clean, and distclean, targets, e.g.
#
#   distclean:: 
#      $(RM) Parser.java
#   run::
#      $(JAVA) $(JAVA_FLAGS) -jar $(JAR_FILE)
#
# By convention, distclean removes files that are distributed with the sources
# but which can be rebuilt from other sources.
#
# Several macros are defined which may be useful in writing package Makefiles.
# They may be overridden by definitions in local.make.
# The principal ones are
#
# JAVA        the java interpreter
# JAVAC       the java compiler (jikes, by default)
# CPFLAG      the -classpath flag required by $(JAVA) and $(JAVAC)
# JAVA_FLAGS  flag options for $(JAVA) and $(JAVAC).  If overriden it should
#             include $(CPFLAG)
# PACKAGE_DIR the relative path from top to package dir (e.g.
#             condor/xxx/package)
# JAR_FILE    package.jar
# CLASSES     a list of all "top-level" classes in the package (the contents of
#             the file classes.make)
# SRC_FILES   a list of all source files ($(CLASSES) with ".java" appended to
#             each name)
# ALL_CLASS_FILES
#             all .class files, including those generated for nested classes

# WARNING:  This Makefile assumes the features of GNU make and JDK1.2 (or later)

# Figure out the platform operating system.
# Note on obscure gnumake feature:  $(findstring WIN xxx) evaluates to "WIN"
# if xxx (in this case the result of uname -s) contains the string
# "WIN".  The cygwin version of uname on Windows NT 4.0 returns
# "CYGWIN_NT-4.0".  Similar strings, such as CYGWIN_98-4.10, are returned on
# other Windows platforms.  Thus on a Windows platform, findstr returns a
# non-null string, so the test "ifneq ($(findstring...),)" succeeds and OS
# is defined to be WINDOWS. Bleah!
SYSNAME = $(shell uname -s)
ifneq ($(findstring WIN,$(SYSNAME)),)
OS = WINDOWS
else 
ifneq ($(findstring Lin,$(SYSNAME)),)
OS = LINUX
else
# assume anything else is Unix
OS = UNIX
endif
endif

######### Tool definitions.
# Any of the following definitions can be overridden by creating a file
# named local.make in the same directory as this file.

#JAVA_HOME = /path/to/java/1.4/sdk
JAVA_HOME = /usr/lib/jvm/default-java
PERL = perl
JAVAC = javac
# To use jikes for compiling (recommended), add the line
#    JAVAC = jikes
# to local.make.

JAVA = $(JAVA_HOME)/bin/java
JAVADOC = $(JAVA_HOME)/bin/javadoc
JAR = $(JAVA_HOME)/bin/jar
JAVALIB = $(JAVA_HOME)/jre/lib/rt.jar

# To use javac instead of jikes for compiling, add the line
#    JAVAC = $(JAVA_HOME)/bin/javac
# to local.make.

# Default option flags
JAVA_FLAGS = $(CPFLAG)

# To get a stack trace with line numbers, at the expense of slower execution
# speed, add the line
#        JAVA_FLAGS += -Djava.compiler=NONE
# to your local.make.  Don't forget the +.
JAVAC_FLAGS = -g $(CPFLAG)
JAVADOC_FLAGS = \
	-d doc \
	-doctitle 'Condor Java Library Release $(RELEASE)' \
	-sourcepath $(TOP) \
	-package \
	-use \
	-version \
	-author \
	-splitindex \
	-link http://java.sun.com/j2se/1.4/docs/api \
	-breakiterator \
	-noqualifier 'java.*:javax.*'

##########################
-include $(TOP)/local.make
##########################

ifneq ($(findstring ERROR,$(JAVA_HOME)),)
$(error $(JAVA_HOME))
endif

# NB: As of Java 1.2, $(JAVALIB) need not be explicitly mentioned for javac,
# although it does no harm to add it here.  It is included here because jikes
# requires it, if you use $(JAVAC) = jikes.
CPFLAG := -classpath $(JAVALIB):$(TOP)

ifneq ($(JLIBS),)
CPFLAG := $(CPFLAG):$(JLIBS)
endif
CPFLAG := $(CPFLAG):.

ifeq ($(PLATFORM),WIN32)
CPFLAG := $(subst :,;,$(CPFLAG))
endif

# Relative path from top to package dir (e.g. condor/cedar)
PACKAGE_DIR = $(subst .,/,$(PACKAGE))

# Name of jar file (e.g. cedar.jar)
JAR_FILE = $(subst .,,$(suffix $(PACKAGE))).jar

# List of class names (e.g. CedarInputStream CedarOutputStream)
CLASSES = $(shell cat classes.make)

# Names of "top-level" class files (e.g. CedarInputStream.class
#                                       CedarOutputStream.class)
CLASS_FILES = $(addsuffix .class,$(CLASSES))

# All class files, including files for nested classes such as SomeClass$1.java
# or SomeClass$Subclass.java.  NB: This macro equires the files to exist, so it
# is only meaningful after "make classes".
ALL_CLASS_FILES = $(foreach class,$(CLASSES),$(class)*.class)

# Source file names (e.g. CedarInputStream.java CedarOutputStream.java)
SRC_FILES = $(addsuffix .java,$(CLASSES))

# Rules.
# Skip this section if we are in the top-level directory.

ifdef PACKAGE

.PHONY: all classes clean clean distclean jar run test

# Default (first) rule:
jar:: $(JAR_FILE)

classes: $(CLASS_FILES)

clean::
	$(RM) *.class *.jar

distclean:: clean

all:: classes

run::

test::

javadoc:: doc classes
	$(JAVADOC) \
		$(JAVADOC_FLAGS) \
		$(PACKAGE) $(EXTRA_DOC)

doc:
	mkdir -p $@

clean::
	$(RM) -r doc

%.class: %.java
	$(JAVAC) $(JAVAC_FLAGS) \
		$<

ifdef MAIN_CLASS

$(JAR_FILE): $(CLASS_FILES) manifest
	cd $(TOP) \
		&& $(JAR) cmf $(PACKAGE_DIR)/manifest $(PACKAGE_DIR)/$@ \
		$(addprefix $(PACKAGE_DIR)/,$(ALL_CLASS_FILES)) \
		$(EXTRA_FILES)

clean::
	$(RM) manifest

manifest: Makefile
	echo "Main-Class: $(PACKAGE_DIR)/$(MAIN_CLASS)" > manifest

else # no MAIN_CLASS

$(JAR_FILE): $(CLASS_FILES)
	cd $(TOP) \
		&& $(JAR) cf $(PACKAGE_DIR)/$@ \
		$(addprefix $(PACKAGE_DIR)/,$(ALL_CLASS_FILES)) \
		$(EXTRA_FILES)

endif # no MAIN_CLASS

endif # PACKAGE

# vim:syntax=make
